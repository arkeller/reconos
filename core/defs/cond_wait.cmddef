#
# \file cond_wait.cmddef
#
# Command definition for waiting on condition variables
#
# \author Enno Luebbers <luebbers@reconos.de>
# \date   07.05.2009
#
#---------------------------------------------------------------------------
# %%%RECONOS_COPYRIGHT_BEGIN%%%
# 
# This file is part of ReconOS (http://www.reconos.de).
# Copyright (c) 2006-2010 The ReconOS Project and contributors (see AUTHORS).
# All rights reserved.
# 
# ReconOS is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
# 
# ReconOS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with ReconOS.  If not, see <http://www.gnu.org/licenses/>.
# 
# %%%RECONOS_COPYRIGHT_END%%%
#---------------------------------------------------------------------------
#

COMMAND reconos_cond_wait

    SYMBOL      OSIF_CMD_COND_WAIT
    ENCODING    0x84
    TYPE        TASK2OS
    OPTIONS     BLOCKING RETVAL


    DELEGATE ecos_ecos
        HOST_OS             ecos
        RESTYPE             CYG_COND_T
        HEADER              <cyg/kernel/kapi.h>
        HEADER              <cyg/infra/cyg_type.h>
        CODE                "$retval = cyg_cond_wait((cyg_cond_t *)$resources[$data].ptr);"
    END # ecos.ecos


    DELEGATE ecos_posix
        HOST_OS             ecos
        RESTYPE             PTHREAD_COND_T
        HEADER              <cyg/posix/types.h>
        HEADER              <cyg/posix/pthread.h>
        IFDEF               UPBFUN_RECONOS_POSIX
        CODE                '''
            // FIXME: We currently assume that the mutex associated with this condvar is
            //        stored in the preceeding resource. This is dangerous.
            if ($resources[$data-1].type != PTHREAD_MUTEX_T) {
                    CYG_FAIL( "Mutex must precede CondVar." );
            }
            $retval = !pthread_cond_wait((pthread_cond_t*) $resources[$data].ptr,
                                        (pthread_mutex_t*) $resources[$data-1].ptr);
'''
    END # ecos.posix

END # reconos_cond_wait
