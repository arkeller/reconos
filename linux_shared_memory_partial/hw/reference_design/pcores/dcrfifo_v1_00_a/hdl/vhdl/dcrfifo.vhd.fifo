----------------------------------------------------------------------------------
-- Company:  Uni Paderborn 
-- Engineer: Andreas Agne
-- 
-- Create Date:    06:26:33 02/15/2009 
-- Design Name: 
-- Module Name:    dcrfifo - Behavioral 
-- Project Name:   Diplomarbeit
-- Target Devices: Virtex2Pro
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity dcrfifo is
	generic (
		C_DCR_BASEADDR :     std_logic_vector := "1111111111";
		C_DCR_HIGHADDR :     std_logic_vector := "0000000000";
		C_DCR_AWIDTH   :     integer          := 10;
		C_DCR_DWIDTH   :     integer          := 32;
		C_NUM_REGS     :     integer          := 2;
		C_FIFO_AWIDTH  :     integer          := 10
	);
	port ( -- the DCR bus interface
		clk            : in  std_logic;
		reset          : in  std_logic;             -- high active synchronous
		o_dcrAck       : out std_logic;
		o_dcrDBus      : out std_logic_vector(C_DCR_DWIDTH-1 downto 0);
		i_dcrABus      : in  std_logic_vector(C_DCR_AWIDTH-1 downto 0);
		i_dcrDBus      : in  std_logic_vector(C_DCR_DWIDTH-1 downto 0);
		i_dcrRead      : in  std_logic;
		i_dcrWrite     : in  std_logic
	);

end dcrfifo;

architecture Behavioral of dcrfifo is

	-- address of count (read only)
	constant ADDR_COUNT : std_logic_vector := C_DCR_BASEADDR;
	-- address of fifo (read/write)
	constant ADDR_FIFO  : std_logic_vector := C_DCR_BASEADDR + 1;
	-- fifo count width
	constant FIFO_DEPTH : integer := 2**C_FIFO_AWIDTH;	
	
	-- fifo memory type
	type t_ram is array (FIFO_DEPTH-1 downto 0) of std_logic_vector(C_DCR_DWIDTH-1 downto 0);
		
	-- fifo memory
	signal fifo_mem : t_ram;
	-- fifo output
	signal fifo_out : std_logic_vector(C_DCR_DWIDTH-1 downto 0);
	-- fifo input
	signal fifo_in : std_logic_vector(C_DCR_DWIDTH-1 downto 0);
	-- fifo output address register
	signal fifo_outaddr : std_logic_vector(C_FIFO_AWIDTH-1 downto 0);
	-- fifo input address register
	signal fifo_inaddr : std_logic_vector(C_FIFO_AWIDTH-1 downto 0);
	-- fifo count register
	signal fifo_count : std_logic_vector(C_FIFO_AWIDTH-1 downto 0);
	-- fifo write_enable signal
	signal fifo_we : std_logic;
	-- advance to next output word
	signal fifo_next : std_logic;
	--
	signal readCountReg : std_logic;
	signal readFifoReg  : std_logic;
	signal writeFifoReg : std_logic;
	--
	signal readCount : std_logic;
	signal readFifo : std_logic;
	signal writeFifo : std_logic;
begin
	readCount <= '1' when i_dcrRead  = '1' and i_dcrABus = ADDR_COUNT else '0';
	readFifo  <= '1' when i_dcrRead  = '1' and i_dcrABus = ADDR_FIFO  else '0';
	writeFifo <= '1' when i_dcrWrite = '1' and i_dcrABus = ADDR_FIFO  else '0';
	-- fifo next word
	fifo_next <= '1' when readFifoReg = '1' and readFifo = '0' else '0';
	-- fifo write enable
	fifo_we   <= '1' when writeFifoReg = '0' and writeFifo = '1' else '0';
	-- connect fifo input to DCR
	fifo_in <= i_dcrDBus;
	
	-- duplicate signal assignment
	o_dcrAck <= readCountReg or readFifoReg or writeFifoReg;
	
	-- bypass mux as in UG018 page 105
	bypass_mux : process (readFifo, readCount, i_dcrDBus, fifo_count, fifo_out)
	begin
		o_dcrDBus <= i_dcrDBus;
		if    readFifo  = '1' then o_dcrDBus <= fifo_out;
		elsif readCount = '1' then o_dcrDBus(C_FIFO_AWIDTH-1 downto 0) <= fifo_count; end if;
	end process;
	
	-- process for synchronous generation of o_dcrAck related signals
	synchronous_ack : process (clk, reset, readFifo, readCount, writeFifo)
	begin
		if reset = '1' then
			readCountReg <= '0';
			readFifoReg <= '0';
			writeFifoReg <= '0';
		elsif rising_edge(clk) then
			readCountReg <= '0';
			readFifoReg <= '0';
			writeFifoReg <= '0';
			if readFifo  = '1' then readFifoReg  <= '1'; end if;
			if readCount = '1' then readCountReg <= '1'; end if;
			if writeFifo = '1' then writeFifoReg <= '1'; end if;
		end if;
	end process;
	
	fifo_access : process (clk, reset, fifo_we, fifo_next)
	begin
		if reset = '1' then
			fifo_inaddr <= (others => '0');
			fifo_outaddr <= (others => '0');
			fifo_count <= (others => '0');
		elsif rising_edge(clk) then
			fifo_out <= fifo_mem(CONV_INTEGER(fifo_outaddr));
			if fifo_we = '1' then
				fifo_mem(CONV_INTEGER(fifo_inaddr)) <= fifo_in;
				fifo_inaddr <= fifo_inaddr + 1;
				fifo_count <= fifo_count + 1;
			elsif fifo_next = '1' then
				fifo_outaddr <= fifo_outaddr + 1;
				fifo_count <= fifo_count - 1;
			end if;
		end if;
	end process;
	
end Behavioral;

